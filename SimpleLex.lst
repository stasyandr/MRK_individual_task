
// ==========================================================================
//  GPLEX error listing for lex source file <SimpleLex.lex>
// ==========================================================================
//  Version:  1.1.3.301
//  Machine:  DESKTOP-MQGTEI6
//  DateTime: 21.11.2021 21:37:32
//  UserName: Jingle
// ==========================================================================


%using SimpleParser;
// Error: Too many errors
// Error: Too many errors, abandoning
// ----------------------------------
%using QUT.Gppg;
%using System.Linq;

%namespace SimpleScanner

Alpha 	[a-zA-Z_]
Digit   [0-9] 
AlphaDigit {Alpha}|{Digit}
INTNUM  {Digit}+
REALNUM {INTNUM}\.{INTNUM}
ID {Alpha}{AlphaDigit}* 

{INTNUM} { 
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
  yylval.iVal = int.Parse(yytext); 
  return (int)Tokens.INUM; 
}
// Error: Illegal character in this context
// ----------------------------------------

{REALNUM} { 
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
  yylval.dVal = double.Parse(yytext); 
  return (int)Tokens.RNUM;
}
// Error: Illegal character in this context
// ----------------------------------------

{ID}  { 
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
  int res = ScannerHelper.GetIDToken(yytext);
  if (res == (int)Tokens.ID)
	yylval.sVal = yytext;
  return res;
}
// Error: Illegal character in this context
// ----------------------------------------

":=" { return (int)Tokens.ASSIGN; }
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
";" { return (int)Tokens.SEMICOLON; }
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
"("  { return (int)Tokens.LBRACKET; }
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
")"  { return (int)Tokens.RBRACKET; }
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
"," { return (int)Tokens.COMMA; }
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
"+" { return (int)Tokens.PLUS; }
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
"-" { return (int)Tokens.MINUS; }
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
"*" { return (int)Tokens.MULT; }
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
"/" { return (int)Tokens.DIVISION; }
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
"%" { return (int)Tokens.MOD; }
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
"[" { return (int)Tokens.LSQBRACKET; }
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
"]" { return (int)Tokens.RSQBRACKET; }
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------

[^ \r\n] {
//-^
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Too many errors, abandoning
// ----------------------------------------
	LexError();
}

%{
  yylloc = new LexLocation(tokLin, tokCol, tokELin, tokECol);
%}

%%

public override void yyerror(string format, params object[] args) // –æ–±—?–∞–±–æ—?–∫–∞ —Å–∏–Ω—?–∞–∫—Å–∏—?–µ—Å–∫–∏—? –æ—?–∏–±–æ–∫
{
  var ww = args.Skip(1).Cast<string>().ToArray();
  string errorMsg = string.Format("({0},{1}): –?—Å—?—?–µ—?–µ–Ω–æ {2}, –∞ –æ–∂–∏–¥–∞–ª–æ—Å—? {3}", yyline, yycol, args[0], string.Join(" –∏–ª–∏ ", ww));
  throw new SyntaxException(errorMsg);
}

public void LexError()
{
  string errorMsg = string.Format("({0},{1}): –ù–µ–∏–∑–≤–µ—Å—?–Ω—?–π —Å–∏–º–≤–æ–ª {2}", yyline, yycol, yytext);
  throw new LexException(errorMsg);
}

class ScannerHelper 
{
  private static Dictionary<string,int> keywords;

  static ScannerHelper() 
  {
    keywords = new Dictionary<string,int>();
    keywords.Add("begin",(int)Tokens.BEGIN);
    keywords.Add("end",(int)Tokens.END);
    keywords.Add("cycle",(int)Tokens.CYCLE);
    keywords.Add("while",(int)Tokens.WHILE);
    keywords.Add("do",(int)Tokens.DO);
    keywords.Add("until",(int)Tokens.UNTIL);
    keywords.Add("repeat",(int)Tokens.REPEAT);
    keywords.Add("for",(int)Tokens.FOR);
    keywords.Add("to",(int)Tokens.TO);
    keywords.Add("write",(int)Tokens.WRITE);
    keywords.Add("if",(int)Tokens.IF);
    keywords.Add("then",(int)Tokens.THEN);
    keywords.Add("else",(int)Tokens.ELSE);
    keywords.Add("var",(int)Tokens.VAR);
  }
  public static int GetIDToken(string s)
  {
	if (keywords.ContainsKey(s.ToLower()))
	  return keywords[s];
	else
      return (int)Tokens.ID;
  }
  
}
// ==========================================================================

